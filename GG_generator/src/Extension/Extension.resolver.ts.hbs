import { {{ capital home }} } from '@prisma/client';
// import { {{ capital external }} } from '@src/graphql/generated/graphql'; // GENERATE THE TYPE WITH CODEGEN ON START
import { I{{ capital home }}Ref, I{{ capital external }}Ref } from '@fed-schema/Utils/refs';

const resolver = {
  {{ capital home }}: {
{{#if (or (eq many "homeMany") (eq many "bothMany"))}}
    {{ firstLowerPlural external }}: ({ {{ firstLowerPlural external }} }: I{{ capital home }}Ref): any[] => // ADD THE EXTERNAL ID TO THE MODEL REF AND RETURN THE '{{ capital external }}' EXTERNAL MODEL
      {{ firstLowerPlural external }}.map(id => ({
        __typename: '{{ capital external }}',
        {{ firstLower external }}Id: id,
      })),
{{else}}
    {{ firstLower external }}: ({ {{ firstLower external }}Id }: I{{ capital home }}Ref): any => ({ // ADD THE EXTERNAL ID TO THE MODEL REF AND RETURN THE '{{ capital external }}' EXTERNAL MODEL
      __typename: '{{ capital external }}',
      {{ firstLower external }}Id: {{ firstLower external }}Id,
    }),
{{/if}}
  },
  {{ capital external }}: {
{{#if (or (eq many "extMany") (eq many "bothMany"))}}
    {{ firstLowerPlural home }}: async ({ {{ firstLower external }}IdId }: I{{ capital external }}IdRef): Promise<{{ capital home}}[]> => {
      // ADD YOUR RESOLVER LOGIC HERE
    },
{{else}}
    {{ firstLower home }}: async ({ {{ firstLower external }}Id }: I{{ capital external }}Ref): Promise<{{ capital home }}> => {
      // ADD YOUR RESOLVER LOGIC HERE
    },
{{/if}}
  },
};
export default resolver;